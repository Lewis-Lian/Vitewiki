import{_ as i,c as t,o as a,ag as e}from"./chunks/framework.Bw-5EFTY.js";const p="/assets/20250221_105541_1.D0ox-gzU.png",n="/assets/20250221_105929_2.CnpdkCLt.png",o="/assets/20250221_110434_3.BKixAr1j.png",h="/assets/20250221_111133_4.BpdKJ4dE.png",l="/assets/20250221_112046_5.q_7lfBnU.png",r="/assets/20250221_125858_6.N3phw2wW.png",d="/assets/20250221_130029_7.D7WC7pdq.png",c="/assets/20250221_130404_8.lpp3u3f9.png",g="/assets/20250221_130454_9.D80wIKwA.png",u="/assets/20250221_130620_10.B0wud7o2.png",b="/assets/20250221_130825_11.B2OdjX78.png",k="/assets/20250221_131339_12.CDwyx73s.png",_="/assets/20250221_133616_13.J3h_R6Up.png",m="/assets/20250221_134114_14.4NiL6Yhp.png",F="/assets/20250221_134239_15.C1LVtJ9x.png",G="/assets/20250221_134845_16.DKrN7gtV.png",C="/assets/20250221_134931_17.iRFXnIug.png",y="/assets/20250221_135054_18.CVIjSpxP.png",v="/assets/20250221_135348_19.DeWYi9Iu.png",B="/assets/20250221_135558_20.jL3HgFg7.png",q="/assets/20250221_135655_21.DeXtwI44.png",x="/assets/20250221_135810_22.Ierv7ys5.png",T=JSON.parse('{"title":"GitHub代码管理教程","description":"","frontmatter":{"title":"GitHub代码管理教程","icon":"solar:document-bold","order":1,"category":["github"],"tag":["Markdown"]},"headers":[],"relativePath":"Studynotes/github/1-1.md","filePath":"Studynotes/github/1-1.md","lastUpdated":1752569972000}'),f={name:"Studynotes/github/1-1.md"};function H(L,s,E,P,w,S){return a(),t("div",null,s[0]||(s[0]=[e('<h1 id="github代码管理教程" tabindex="-1">GitHub代码管理教程 <a class="header-anchor" href="#github代码管理教程" aria-label="Permalink to &quot;GitHub代码管理教程&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">前言</p><p>本篇为手把手教学的 Github 代码管理教程，属于新手入门级别的难度。教程简单易操作，能够基本满足读者朋友日常项目寄托于 Github 平台上进行代码管理的需求。Git 与 Github 是一名合格程序员 coder 必定会接触到的工具与平台，GitHub 作为世界上最大的代码开源与分享平台，读者朋友可以在 Github 得到或上传各种各样的代码资源。希望这篇博文能给读者朋友的 Git 与 Github 使用带来些许帮助，Respect！</p></div><blockquote><p>Github官网地址：<a href="https://github.com/" target="_blank" rel="noreferrer">GitHub</a></p></blockquote><h2 id="github概述" tabindex="-1">Github概述 <a class="header-anchor" href="#github概述" aria-label="Permalink to &quot;Github概述&quot;">​</a></h2><h3 id="git的诞生" tabindex="-1">Git的诞生 <a class="header-anchor" href="#git的诞生" aria-label="Permalink to &quot;Git的诞生&quot;">​</a></h3><p>GitHub 是一个基于web的服务平台，主要用于版本控制和协作，让开发者和项目团队能够更好地一起工作。它提供了一个 Git 代码仓库的托管服务，Git 是一个开源的分布式版本控制系统，由 Linus Torvalds 为更好地管理 Linux 内核开发而设计。</p><p>在 GitHub 上，用户可以创建自己的项目仓库来管理代码，同时也可以参与到其他人的项目中。 GitHub 提供了许多协作特性，比如问题跟踪、<strong>项目管理</strong>、代码审查、团队讨论等，这些都极大地促进了开源项目的合作和发展。</p><blockquote><p>Git 诞生八卦： Linus 在 1991 年创建了开源的 Linux，从此，Linux 系统不断发展，已经成为最大的服务器系统软件了。 Linus 虽然创建了 Linux，但 Linux 的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为 Linux 编写代码，那 Linux 的代码是如何管理的呢？ 在 2002 年以前，世界各地的志愿者把源代码文件通过 diff 的方式发给 Linus，然后由 Linus 本人通过手工方式合并代码！ 直到 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统。 但在 2005 年这样的美好被打破了，于是 Linus 花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！ Git 迅速成为最流行的分布式版本控制系统，尤其是 <em><strong>2008 年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。</strong></em></p></blockquote><h3 id="git与github的联系" tabindex="-1">Git与Github的联系 <a class="header-anchor" href="#git与github的联系" aria-label="Permalink to &quot;Git与Github的联系&quot;">​</a></h3><p>Git 和 GitHub 是两个紧密相关的事物：</p><ol><li><strong>Git</strong>: <code>Git</code> 是一个开源的分布式版本控制系统，由 <code>Linus Torvalds</code> 创建于 2005 年。它允许开发者跟踪和管理源代码历史，支持多人协作开发。Git 的核心功能包括版本控制、分支管理、合并和冲突解决等。它是基于命令行的工具，可以在本地计算机上完全离线工作。</li><li><strong>GitHub</strong>: <code>GitHub</code> 是一个基于 <code>Git</code> 的在线托管平台，提供 <code>Git</code> 仓库的托管服务。它为开源项目和个人开发者提供了一系列协作工具，如代码审查、问题跟踪、项目管理、<code>Wiki</code> 页面等。<code>GitHub</code> 还提供了图形用户界面，使得用户可以更容易地使用<code>Git</code>的功能。此外，<code>GitHub </code>还提供了一些社交网络特性，如关注其他用户、星标项目（<code>star</code>）、对项目代码提出改进建议（<code>fork</code>）和提交拉取请求（<code>pull request</code>）。</li></ol><p>综上所述，<code>Git</code> 是一个版本控制系统，而 <code>GitHub</code> 是一个使用 <code>Git</code> 的工具和服务提供者。开发者可以在本地使用 <code>Git</code> 进行版本控制，然后将代码推送到 <code>GitHub</code> 上进行共享和协作。</p><h2 id="github的使用" tabindex="-1">Github的使用 <a class="header-anchor" href="#github的使用" aria-label="Permalink to &quot;Github的使用&quot;">​</a></h2><h3 id="github注册登录" tabindex="-1">Github注册登录 <a class="header-anchor" href="#github注册登录" aria-label="Permalink to &quot;Github注册登录&quot;">​</a></h3><ol><li>登入 GitHub 的官网，点击 sign up（注册）</li></ol><p><img src="'+p+'" alt=""></p><ol start="2"><li>填入相关的注册 GitHub 账号信息</li></ol><p><img src="'+n+'" alt=""></p><ol start="3"><li>登入自己刚刚注册的 Github 账号</li></ol><p><img src="'+o+'" alt=""></p><h3 id="github项目库创建" tabindex="-1">Github项目库创建 <a class="header-anchor" href="#github项目库创建" aria-label="Permalink to &quot;Github项目库创建&quot;">​</a></h3><ol><li>登入自己的 Github，点击 ==new== 进入创建项目页面</li></ol><p><img src="'+h+'" alt=""></p><ol start="2"><li>按下图创建一个项目</li></ol><p><img src="'+l+'" alt=""></p><div class="tip custom-block"><p class="custom-block-title">注意：</p><p>库分为两种，分别是：公有（<code>Public</code>）和私有（<code>Private</code>），大家自行选择即可</p></div><p>在创建完成自己的库之后，下面就要让自己的电脑克隆一个自己所创建的库，方面自己电脑上的代码同步到 <strong>GitHub <strong>你所创建的库当中。为了实现，就需要安装一个软件</strong> Git Bash</strong>。接下来让我们安装 <strong>Git Bash</strong>。</p><h2 id="安装git-bash" tabindex="-1">安装Git Bash <a class="header-anchor" href="#安装git-bash" aria-label="Permalink to &quot;安装Git Bash&quot;">​</a></h2><p>点击下方链接进入安装git教程</p><ul><li><a href="https://wiki.i615.cn/Studynotes/git/1-1.html" target="_blank" rel="noreferrer">Windows</a></li></ul><h2 id="git和github的绑定" tabindex="-1">Git和Github的绑定 <a class="header-anchor" href="#git和github的绑定" aria-label="Permalink to &quot;Git和Github的绑定&quot;">​</a></h2><h3 id="得到ssh-keys" tabindex="-1"><strong>得到ssh keys</strong> <a class="header-anchor" href="#得到ssh-keys" aria-label="Permalink to &quot;**得到ssh keys**&quot;">​</a></h3><p>输入</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh</span></span></code></pre></div><p>返回 &quot;<code>no such file or directory</code>&quot; 表明电脑没有<code>ssh key</code>，需要创建<code>ssh key</code></p><p>在终端输入</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “git账号”；</span></span></code></pre></div><p>连续进行 3 次回车Enter（确认），得到如下截图中的信息即可；</p><p><img src="'+r+'" alt=""></p><p>按路径进入 .ssh，里面存储的是两个 <strong>ssh key</strong> 的秘钥，<strong>id_rsa.pub</strong> 文件里面存储的是公钥，<strong>id_rsa</strong> 文件里存储的是私钥， ==不能告诉别人。== <strong>打开id_rsa.pub文件，复制里面的内容。</strong></p><p><img src="'+d+'" alt=""></p><h3 id="绑定ssh密钥" tabindex="-1">绑定ssh密钥 <a class="header-anchor" href="#绑定ssh密钥" aria-label="Permalink to &quot;绑定ssh密钥&quot;">​</a></h3><p>接下需要登录到自己的 GitHub 上边添加这个密匙</p><p><img src="'+c+'" alt=""><img src="'+g+'" alt=""></p><p>填写名字并且填写复制的公钥（id_rsa.pub内容），添加后配置完成</p><p><img src="'+u+'" alt=""></p><p>完成后如下图</p><p><img src="'+b+'" alt=""></p><p>我们回到 <strong>Git bash</strong> 上边，输入：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com</span></span></code></pre></div><p>来检查是否成功绑定。如果输入代码之后再选择 yes 出来是这样说明就成功啦！！！</p><p><img src="'+k+'" alt=""></p><h3 id="剩余配置内容" tabindex="-1">剩余配置内容 <a class="header-anchor" href="#剩余配置内容" aria-label="Permalink to &quot;剩余配置内容&quot;">​</a></h3><p>将 name 最好和 GitHub 上边的一样，email 是一定要是注册 GitHub 的那个邮箱地址</p><p>这两个的顺序可以颠倒，没有固定的顺序。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “gitname”</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “git邮箱”</span></span></code></pre></div><p><img src="'+_+'" alt=""></p><p>截止到这里的操作，已经完成本地 Git 与远程的 Github 绑定，这意味着我们已经可以通过 Git 向 GitHub 提交代码啦！</p><h2 id="使用git将代码提交到github" tabindex="-1">使用Git将代码提交到GitHub <a class="header-anchor" href="#使用git将代码提交到github" aria-label="Permalink to &quot;使用Git将代码提交到GitHub&quot;">​</a></h2><blockquote><p>该过程需要使用经常的接触的两个 Git 命令，包括：<strong><code>push</code><strong>和</strong> <code>pull</code></strong></p></blockquote><p>**<code>push</code>：**该单词直译过来就是 “推” 的意思，如果我们本地的代码有了更新，为了保持本地与远程的代码同步，我们就需要把本地的代码推到远程的仓库，代码示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p><strong><code>pull</code></strong> ：该单词直译过来就是 “拉” 的意思，如果我们远程仓库的代码有了更新，同样为了保持本地与远程的代码同步，我们就需要把远程的代码拉到本地，代码示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><h3 id="克隆仓库" tabindex="-1"><strong>克隆仓库</strong> <a class="header-anchor" href="#克隆仓库" aria-label="Permalink to &quot;**克隆仓库**&quot;">​</a></h3><p>将我们的库克隆下来到本地电脑中，方便以后进行上传代码。</p><p><img src="'+m+'" alt=""></p><p>点进仓库之后点击 Code，点击 ssh 会看到一串网址（http也可以），这个地址就是代码地址，git clone 命令会用的到。</p><p><img src="'+F+'" alt=""></p><p>接下来我们就开始选择文件存储地方了，在本地电脑中找到存储文件的地方，然后右键选择 Git Bash Here</p><p>在终端输入 git clone 地址（这个地址就是刚刚库那个Code的上代码地址）例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/Lewis-Lian/Lewiswiki</span></span></code></pre></div><p>该过程有时候可能会需要输入 Github 账号密码啥的，记得不要输错啦！</p><p><img src="'+G+'" alt=""></p><p>如下图所示，指定目录已经存在了我们的库文件</p><p><img src="'+C+'" alt=""></p><h3 id="上传代码" tabindex="-1">上传代码 <a class="header-anchor" href="#上传代码" aria-label="Permalink to &quot;上传代码&quot;">​</a></h3><p>打开这个文件夹，然后在其中创建一个任意格式，任意名称的文件（这里新建了一个测试文件）。</p><p><img src="'+y+`" alt=""></p><p>在这个文件夹里面右键<code>git bash</code>进终端输入</p><p><code>git add</code>我们新增的文件</p><p>注意:add有多种形式，可以add某个文件，某个文件夹，或直接add当前仓库下所有文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git add 单个文件</span></span>
<span class="line"><span>git add 文件夹1/ 文件夹2/ ……多个文件夹之间空格隔开</span></span>
<span class="line"><span>git add .</span></span></code></pre></div><p><img src="`+v+'" alt=""></p><p>之后输入</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;测试是否成功&quot;</span></span></code></pre></div><p>引号内的内容可以随意改动，这个语句的意思是 给你刚刚上传的文件一个备注，方便查找记忆而已；</p><p><img src="'+B+'" alt=""></p><p>接着输入 push 指令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><p>如下图所示就代表成功了；</p><p><img src="'+q+'" alt=""></p><p>打开 GitHub，看到刚刚上传的文件，显示成功。</p><p><img src="'+x+'" alt=""></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ol><li><a href="https://blog.csdn.net/qq_35206244/article/details/97698815" target="_blank" rel="noreferrer">Git基本使用教程（一）：入门及第一次基本完整操作_git的使用-CSDN博客</a></li></ol>',97)]))}const I=i(f,[["render",H]]);export{T as __pageData,I as default};
